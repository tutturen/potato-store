type Query {
  allProducts(filter: FilterInput): [Product!]!
  allCategories: [Category!]!
  category(categoryName: String): Category
  cart(products: [ID!]!): Cart
  user: User
}

type Mutation {
  createAccount(username: String!, password: String!): LoginResult!
  login(username: String!, password: String!): LoginResult!
  buy(products: [ID!]!): Receipt!
}

type FilterInput {
  text: String
  minPrice: Int
  maxPrice: Int
  category: [ID]
  onSale: Boolean
  organic: Boolean
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  cart: Cart!
}

type LoginResult {
  user: User
  success: Boolean!
  token: String
}

type Receipt {
  cart: Cart
  success: Boolean!
}

type Cart {
  products: [Product!]!
  totalBeforeDiscount: Float!
  totalDiscount: Float!
  total: Float!
}

type Order {
  products: [Product!]!
  totalBeforeDiscount: Float!
  totalDiscount: Float!
  total: Float!
  user: User
}

type Category {
  id: ID
  name: String
  products: [Product!]!
}

type Product {
  id: ID!
  name: String!
  subtitle: String
  image: String
  price: Float
  unitPrice: Float
  unit: String
  category: Category
  organic: Boolean!
  percentSale: PercentSale
  packageDeal: PackageDeal
}

type PercentSale {
  product: Product!
  cut: Int
}

type PackageDeal {
  product: [Product!]!
  paidQuantity: Int!
  minimumQuantity: Int!
}